{"title":"Spring-Secutity-Oauth2实现Auth Server(旧版)","uid":"40ea842bde81b9af210ab16629bae6dd","slug":"Spring-Secutity-Oauth2-Demo","date":"2022-04-23T13:35:50.000Z","updated":"2022-06-02T08:46:03.035Z","comments":true,"path":"api/articles/Spring-Secutity-Oauth2-Demo.json","keywords":null,"cover":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204232139177.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1></blockquote>\n<pre><code>Oauth2授权是项目中使用很多的协议，在三方授权中有这很大的应用。\n\nspring 官方宣布在spring-security5以后删除掉Authorization Server相关功能，官方推荐使用第三方oauth2服务器，例如keycloak。作为spring的忠实舔狗，我跟很多开发者一样对spring的这个宣布不能认同，spring 迫于对广大开发者强烈不满和迫切需求，觉得另开一个项目（Spring Authorization Server）. 时间过去很久了。社区一直在开发中。\n\n在开发过程中社区将jar包上传到maven central，例如0.1.0-0.1.2版本，但是都未明文说明可以使用到生产环境。\n\n近期spring 官方发布了几个通知：\n</code></pre>\n<ul>\n<li><p>2021年8月17日，通知：Spring Authorization Server迁移到spring projects</p>\n<p>  <img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825093410598.png\" alt=\"image-20210825093410598\"></p>\n</li>\n<li><p>2021年8月19日，通知Spring Authorization Server 生产环境可用。（其实这几天官方的通知有变化，比如先发的文档，上面未写maven central上的jar地址。也可以理解，事情要一步一步做的嘛😁）</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825093554682.png\" alt=\"image-20210825093554682\"></p>\n<p>看到该通知后，想尝试下。于是进入仓库地址（<a href=\"https://github.com/spring-projects/spring-authorization-server%EF%BC%89%EF%BC%8C%E6%9C%AA%E5%8F%91%E7%8E%B0%E6%9C%89%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3%EF%BC%8C%E5%8F%AA%E6%9C%89%E6%BA%90%E7%A0%81%E5%92%8C%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E3%80%82\">https://github.com/spring-projects/spring-authorization-server），未发现有使用文档，只有源码和使用示例。</a></p>\n<pre><code>因此有些抵触，没有文档使用难度较大，无法深入理解开发者思想。所以想再等等。\n\n此时想起以前的oauth2实现方案，想做个复习，所以想写个demo。记录下来。也给其他学者一个参考。因此写下此demo。\n</code></pre>\n<p><em>之后我会使用Spring Authorization Server</em> 依赖，再次实现跟本demo一样的例子，敬请关注。</p>\n</li>\n</ul>\n<blockquote>\n<h1 id=\"什么是Oauth2-0\"><a href=\"#什么是Oauth2-0\" class=\"headerlink\" title=\"什么是Oauth2.0\"></a>什么是Oauth2.0</h1></blockquote>\n<pre><code>本文不作赘述，网上文章较多。推荐几个，https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html， https://oauth.net/2/ 。https://zhuanlan.zhihu.com/p/84670338。\n</code></pre>\n<blockquote>\n<h1 id=\"使用Spring-Security和Spring-Security-Oauth2依赖实现\"><a href=\"#使用Spring-Security和Spring-Security-Oauth2依赖实现\" class=\"headerlink\" title=\"使用Spring Security和Spring Security Oauth2依赖实现\"></a>使用Spring Security和Spring Security Oauth2依赖实现</h1></blockquote>\n<ul>\n<li><p>说明</p>\n<p>spring Boot： 2.3.4.RELEASE</p>\n<p>spring-Security-oauth2：2.5.1.RELEASE</p>\n<p>jdk: 1.8</p>\n<p>开发工具: IDEA</p>\n<p>包管理工具：MAVEN</p>\n</li>\n<li><p>项目结构</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">authorization-server \t\t\t\t\t\t&#x2F;&#x2F;授权服务器module根目录\n├── README.md\t\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; 说明文档\t\t\t\t\n├── authorization-server.iml\t\t&#x2F;&#x2F; idea系统文件（忽略）\n├── pom.xml\t\t\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; maven依赖（注意父级依赖）\n└── src\t\t\t\t\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; 源码路径\n    ├── main\n    │   ├── java\n    │   │   └── com\n    │   │       └── xpp\n    │   │           └── sslt5\n    │   │               └── as\n    │   │                   ├── AuthorizationServerApplication.java &#x2F;&#x2F; 启动类\n    │   │                   ├── config\n    │   │                   │   ├── AuthorizationServerConfig.java  &#x2F;&#x2F; 授权服务器配置类\n    │   │                   │   └── SecurityConfig.java\t\t\t\t\t\t\t&#x2F;&#x2F;security安全配置\n    │   │                   ├── entity\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    │   │                   │   └── Account.java\t\t\t\t\t\t\t\t\t\t\t\t&#x2F;&#x2F;用户实体类\t\t\t\t\t\t\t\n    │   │                   ├── repository\n    │   │                   │   └── UserRepository.java\t\t\t\t\t\t\t&#x2F;&#x2F; 账户Dao\n    │   │                   └── svc\n    │   │                       └── UserDetailSvc.java\t\t\t\t\t\t\t&#x2F;&#x2F; security user Details类\n    │   └── resources\t\t\t\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; 源文件目录\n    │       ├── application.yml\t\t\t\t\t\t\t&#x2F;&#x2F; spring boot 配置文件\n    │       ├── oauth2-data.sql\t\t\t\t&#x2F;&#x2F; 初始化oauth2数据sql\n    │       ├── import.sql\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; jpa初始化Account表语句\n    │       └── oauth2-schema.sql\t\t\t&#x2F;&#x2F; 初始化创建oauth2相关表语句\n    └── test\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&#x2F;&#x2F; 测试源码路径\n        └── java</code></pre>\n</li>\n<li><p>Maven依赖：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;parent&gt;\n        &lt;artifactId&gt;spring-security-lt5-oauth2&lt;&#x2F;artifactId&gt;\n        &lt;groupId&gt;com.xpp&lt;&#x2F;groupId&gt;\n        &lt;version&gt;0.0.1&lt;&#x2F;version&gt;\n    &lt;&#x2F;parent&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;artifactId&gt;authorization-server&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;8&lt;&#x2F;maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;8&lt;&#x2F;maven.compiler.target&gt;\n    &lt;&#x2F;properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-security-test&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.security.oauth&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-security-oauth2&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.5.1.RELEASE&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n          &lt;groupId&gt;com.h2database&lt;&#x2F;groupId&gt;\n          &lt;artifactId&gt;h2&lt;&#x2F;artifactId&gt;\n          &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n</li>\n<li><p>Security config类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.xpp.sslt5.as.config;\n\nimport com.xpp.sslt5.as.svc.UserDetailSvc;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n    @Bean\n    public PasswordEncoder passwordEncoder() &#123;\n        return new BCryptPasswordEncoder();\n    &#125;\n\n    @Autowired\n    private UserDetailSvc userDetailSvc;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n        auth.userDetailsService(userDetailSvc).passwordEncoder(passwordEncoder());\n    &#125;\n\n\n    &#x2F;&#x2F; AuthenticationManager 对象在 OAuth2 认证服务中要使用，提前放入 IOC 容器中\n   \t&#x2F;&#x2F; 必须使用@Bean注入IOC容器中，否则password grant_type无效。\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception &#123;\n        return super.authenticationManagerBean();\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>Authorization Server Config 配置类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.xpp.sslt5.as.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.security.oauth2.provider.ClientDetailsService;\nimport org.springframework.security.oauth2.provider.approval.ApprovalStore;\nimport org.springframework.security.oauth2.provider.approval.JdbcApprovalStore;\nimport org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;\nimport org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;\nimport org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices;\nimport org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;\nimport org.springframework.security.oauth2.provider.token.DefaultTokenServices;\nimport org.springframework.security.oauth2.provider.token.TokenStore;\nimport org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;\n\nimport javax.sql.DataSource;\n\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter &#123;\n    &#x2F;&#x2F; 数据库连接池对象，SpringBoot 配置完成后自动注入\n    @Autowired\n    private DataSource dataSource;\n\n    &#x2F;&#x2F; 授权模式专用对象，在 Security 配置中注入容器\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    &#x2F;&#x2F; 客户端信息来源\n    @Bean\n    public ClientDetailsService jdbcClientDetailsService() &#123;\n        return new JdbcClientDetailsService(dataSource);\n    &#125;\n\n    &#x2F;&#x2F; token 保存策略，指你生成的 Token 要往哪里存储\n    &#x2F;&#x2F;JdbcTokenStore ， InMemoryTokenStore， JwkTokenStore，JwtTokenStore, RedisTokenStore\n    @Bean\n    public TokenStore tokenStore() &#123;\n        return new JdbcTokenStore(dataSource);\n    &#125;\n\n    &#x2F;&#x2F; 指定客户端信息的数据库来源\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;\n        clients.withClientDetails(jdbcClientDetailsService());\n    &#125;\n\n\n    &#x2F;&#x2F; 授权信息保存策略\n    @Bean\n    public ApprovalStore approvalStore() &#123;\n        return new JdbcApprovalStore(dataSource);\n    &#125;\n\n    &#x2F;&#x2F; 授权码模式数据来源\n    @Bean\n    public AuthorizationCodeServices authorizationCodeServices() &#123;\n        return new JdbcAuthorizationCodeServices(dataSource);\n    &#125;\n\n\n    &#x2F;&#x2F; 令牌管理\n    @Bean\n    public AuthorizationServerTokenServices tokenServices() &#123;\n        DefaultTokenServices tokenServices &#x3D; new DefaultTokenServices();\n        &#x2F;&#x2F; token 保存策略\n        tokenServices.setTokenStore(tokenStore());\n        &#x2F;&#x2F; 支持刷新模式\n        tokenServices.setSupportRefreshToken(true);\n        &#x2F;&#x2F; 客户端信息来源\n        tokenServices.setClientDetailsService(jdbcClientDetailsService());\n        &#x2F;&#x2F; token 有效期自定义设置，默认 12 小时\n        tokenServices.setAccessTokenValiditySeconds(60 * 60 * 12);\n        &#x2F;&#x2F; refresh token 有效期自定义设置，默认 30 天\n        tokenServices.setRefreshTokenValiditySeconds(60 * 60 * 24 * 7);\n\n        return tokenServices;\n    &#125;\n\n    &#x2F;&#x2F; 检查 token 的策略，即配置令牌端点的安全约束\n    &#x2F;&#x2F; 就是这个端点谁能访问，谁不能访问\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer security) &#123;\n        &#x2F;&#x2F; 此时指 endpoint 完全公开\n        security.tokenKeyAccess(&quot;permitAll()&quot;);\n        &#x2F;&#x2F; checkToken 这个 endpoint 完全公开\n        security.checkTokenAccess(&quot;permitAll()&quot;);\n        &#x2F;&#x2F; 是否允许表单认证\n        security.allowFormAuthenticationForClients();\n\n    &#125;\n\n    &#x2F;&#x2F; OAuth2 的主配置信息\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) &#123;\n        endpoints\n                .approvalStore(approvalStore())\n                .authenticationManager(authenticationManager)\n                .authorizationCodeServices(authorizationCodeServices())\n                .tokenServices(tokenServices());\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>UserDetailSvc类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.xpp.sslt5.as.svc;\n\nimport com.xpp.sslt5.as.entity.Account;\nimport com.xpp.sslt5.as.repository.AccountRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.stereotype.Component;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Component\npublic class UserDetailSvc implements UserDetailsService &#123;\n    @Autowired\n    private AccountRepository userRepository;\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException &#123;\n        List&lt;GrantedAuthority&gt; grantedAuths &#x3D; new ArrayList&lt;&gt;();\n        Account account &#x3D; userRepository.findByUsername(s);\n        if (Objects.isNull(account)) &#123;\n            throw new UsernameNotFoundException(&quot;No user found with username: &quot; + s);\n        &#125;\n        Arrays.stream(account.getRoleIdentifies().split(&quot;,&quot;)).collect(Collectors.toSet())\n                .forEach(x-&gt; grantedAuths.add(new SimpleGrantedAuthority(x)));\n        return new User(account.getUsername(), account.getPassword(), grantedAuths);\n    &#125;\n\n    public static void main(String[] args) &#123;\n        System.out.println(new BCryptPasswordEncoder().encode(&quot;xpp&quot;));\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>以上只是简单的累出来重要文件，其他配置文件请自行去github上查看。</p>\n</li>\n</ul>\n<blockquote>\n<p>测试（重点）</p></blockquote>\n<ul>\n<li><p>授权码模式</p>\n<p>启动项目后，打开浏览器输入：</p>\n<p><a href=\"http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=xpp\">http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=xpp</a></p>\n<p>出现如下界面：</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825111418616.png\" alt=\"image-20210825111418616\"></p>\n<p>出现上述界面后，输入用户名密码(a1,a2,a3皆可，密码都是xpp):</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825111730313.png\" alt=\"image-20210825111730313\"></p>\n<p>按照上图点击，Authorize按钮。</p>\n<p>因为我配置的redirect_uri是百度，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825111830201.png\" alt=\"image-20210825111830201\"></p>\n<p>我们看到百度后面跟了个code，复制这个code值，打开postman获取token：</p>\n<p>注意client和secret的授权</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825112006352.png\" alt=\"image-20210825112006352\"></p>\n<p>传递参数界面：</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825112026225.png\" alt=\"image-20210825112026225\"></p>\n<p>发送请求返回的界面：</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825112051619.png\" alt=\"image-20210825112051619\"></p>\n<p>测试刷新token：</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825112142968.png\" alt=\"image-20210825112142968\"></p>\n<p>我们看到access_token跟之前获取的变化了，refresh_token未变化。</p>\n</li>\n<li><p>简化模式</p>\n<p>访问简化模式地址：<a href=\"http://localhost:8080/oauth/authorize?response_type=token&amp;client_id=xpp\">http://localhost:8080/oauth/authorize?response_type=token&amp;client_id=xpp</a></p>\n<p>输入用户名密码（同一个client下的用户如果授权过不会出现登录界面），输入密码登录后, 点击授权和authorize按钮，浏览器自动跳转到百度，地址来为：<a href=\"https://www.baidu.com/#access_token=Pfa4YiIoN3Z1C2e1q-GV_E023C4&amp;token_type=bearer&amp;expires_in=43199&amp;scope=read\">https://www.baidu.com/#access_token=Pfa4YiIoN3Z1C2e1q-GV_E023C4&amp;token_type=bearer&amp;expires_in=43199&amp;scope=read</a></p>\n<p>我们看到省去了请求oauth&#x2F;token，直接在回调地址中看到了access_token. 这就是简化模式。</p>\n</li>\n<li><p>密码模式</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825113042089.png\" alt=\"image-20210825113042089\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825113115417.png\" alt=\"image-20210825113115417\"></p>\n<p>刷新token此处不再举例测试。</p>\n</li>\n<li><p>客户端模式</p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825113042089.png\" alt=\"image-20210825113042089\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xpp1109/images/main/uPic/image-20210825113231013.png\" alt=\"image-20210825113231013\"></p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上就讲oauth2的功能基本完成，对于inmemory和redis的方式没有举例。</p>\n<p>这里还有两个问题，第一个：获取的token如何使用，也就是authorization client和 resource server，后期慢慢补充。</p>\n<p>第二个：登录用户和client维护应该通过接口提供创建更新等方位方式。后期慢慢补充。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文使用的事spring-security-oauth2实现，在spring security 5以后已经弃用，后续会单独使用security实现。敬请期待，期待您的关注。期待您的意见。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>源码地址：<a href=\"https://github.com/ITLab1024/spring-security-lt5-oauth2\">https://github.com/ITLab1024/spring-security-lt5-oauth2</a></p></blockquote>\n","feature":false,"text":" 前言 Oauth2授权是项目中使用很多的协议，在三方授权中有这很大的应用。 spring 官方宣布在spring-security5以后删除掉Authorization Server相关功能，官方推荐使用第三方oauth2服务器，例如keycloak。作为spring的忠实舔狗...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"Java","slug":"Java","count":2,"path":"api/categories/Java.json"},{"name":"Spring Security","slug":"Java/Spring-Security","count":2,"path":"api/categories/Java/Spring-Security.json"},{"name":"Spring-Secutiry-Oauth2","slug":"Java/Spring-Security/Spring-Secutiry-Oauth2","count":1,"path":"api/categories/Java/Spring-Security/Spring-Secutiry-Oauth2.json"}],"tags":[{"name":"Spring Security Oauth2","slug":"Spring-Security-Oauth2","count":1,"path":"api/tags/Spring-Security-Oauth2.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFOauth2-0\"><span class=\"toc-text\">什么是Oauth2.0</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Spring-Security%E5%92%8CSpring-Security-Oauth2%E4%BE%9D%E8%B5%96%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">使用Spring Security和Spring Security Oauth2依赖实现</span></a></li></ol>","author":{"name":"ITLab","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204221711395.png","link":"/","description":"梦想越是美丽，就越是显得遥不可及，可奇怪的是，一旦你下定了决心，很快地，那些梦想就一一成为了现实！","socials":{"github":"https://github.com/ITLab1024","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xpp1109","csdn":"","juejin":"","customs":{"wxgzh":{"icon":"fa fa-wechat","link":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204231828426.jpg"}}}},"mapped":true,"prev_post":{"title":"ubuntu-multipass","uid":"ba590f4c595f20e0726c162dbce4dd2d","slug":"ubuntu-multipass","date":"2022-04-24T08:42:43.000Z","updated":"2022-06-02T08:46:03.037Z","comments":true,"path":"api/articles/ubuntu-multipass.json","keywords":null,"cover":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204241645651.png","text":"什么是Maultipass？ 官方说明： Ubuntu VMs on demand for any workstation Get an instant Ubuntu VM with a single command. Multipass can launch and run v...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"ubuntu","slug":"ubuntu","count":1,"path":"api/categories/ubuntu.json"},{"name":"multipass","slug":"ubuntu/multipass","count":1,"path":"api/categories/ubuntu/multipass.json"},{"name":"虚拟机","slug":"ubuntu/multipass/虚拟机","count":1,"path":"api/categories/ubuntu/multipass/虚拟机.json"}],"tags":[{"name":"multipass","slug":"multipass","count":1,"path":"api/tags/multipass.json"},{"name":"ubuntu","slug":"ubuntu","count":1,"path":"api/tags/ubuntu.json"}],"author":{"name":"ITLab","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204221711395.png","link":"/","description":"梦想越是美丽，就越是显得遥不可及，可奇怪的是，一旦你下定了决心，很快地，那些梦想就一一成为了现实！","socials":{"github":"https://github.com/ITLab1024","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xpp1109","csdn":"","juejin":"","customs":{"wxgzh":{"icon":"fa fa-wechat","link":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204231828426.jpg"}}}},"feature":true},"next_post":{"title":"kubernetes-黑马程序员","uid":"c6e4902349bc052e9c4272ae807ca5e6","slug":"kubernetes-黑马程序员","date":"2022-04-23T13:10:13.000Z","updated":"2022-06-02T08:46:03.037Z","comments":true,"path":"api/articles/kubernetes-黑马程序员.json","keywords":null,"cover":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204232113278.jpeg","text":"Kubernetes 1. Kubernetes介绍1.1 应用部署方式演变在部署应用程序的方式上，主要经历了三个时代： 传统部署：互联网早期，会直接将应用程序部署在物理机上 优点：简单，不需要其它技术的参与 缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序...","link":"","photos":[],"count_time":{"symbolsCount":"166k","symbolsTime":"2:31"},"categories":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/categories/Kubernetes.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":1,"path":"api/tags/kubernetes.json"}],"author":{"name":"ITLab","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204221711395.png","link":"/","description":"梦想越是美丽，就越是显得遥不可及，可奇怪的是，一旦你下定了决心，很快地，那些梦想就一一成为了现实！","socials":{"github":"https://github.com/ITLab1024","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xpp1109","csdn":"","juejin":"","customs":{"wxgzh":{"icon":"fa fa-wechat","link":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204231828426.jpg"}}}},"feature":false}}