{"title":"使用Kubeadm搭建Kubernetes集群（v1.22）","uid":"ddc916691a7c6f09eafaf2d5a06c2348","slug":"使用Kubeadm搭建Kubernetes集群（v1-22）","date":"2022-05-02T03:18:25.000Z","updated":"2022-06-02T08:46:03.037Z","comments":true,"path":"api/articles/使用Kubeadm搭建Kubernetes集群（v1-22）.json","keywords":null,"cover":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202205021123222.jpeg","content":"<p>版本说明</p>\n<p>v1.22</p>\n<p>准备三台机器</p>\n<p>使用Multipass（如何使用，请参考文章<a href=\"https://zhuanlan.zhihu.com/p/410967707\">皮皮：使用Ubuntu Multipass创建虚拟机（方便快捷）</a>）创建三个vm。也就是三个节点node1， node2， node3</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">multipass launch -c 2 -m 2G -n node1\n\nmultipass launch -c 2 -m 2G -n node2\n\nmultipass launch -c 2 -m 2G -n node3</code></pre>\n\n\n\n<p>系统设置、安装容器（本文使用Docker）、kubernetes工具（三个节点都需要执行）</p>\n<ol>\n<li>系统设置</li>\n</ol>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">cat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;modules-load.d&#x2F;k8s.conf\nbr_netfilter\nEOF\n\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf\nnet.bridge.bridge-nf-call-ip6tables &#x3D; 1\nnet.bridge.bridge-nf-call-iptables &#x3D; 1\nEOF\nsudo sysctl --system</code></pre>\n\n\n\n<ol>\n<li>docker安装</li>\n</ol>\n<p>根据官网文档进行安装，因为我我的vm是ubuntu，根据该连接进行安装：<a href=\"https://link.zhihu.com/?target=https://docs.docker.com/engine/install/ubuntu/\">https://docs.docker.com/engine/install/ubuntu/</a></p>\n<ul>\n<li>如果安装过docker，使用下面的命令清理</li>\n</ul>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">sudo apt-get remove docker docker-engine docker.io containerd runc\n \n \nsudo apt-get update\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release</code></pre>\n\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg</code></pre>\n\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">echo \\\n  &quot;deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \\\n  $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null</code></pre>\n\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre>\n\n\n\n<ul>\n<li>设置docker的cgroups systemd</li>\n</ul>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">sudo mkdir &#x2F;etc&#x2F;docker\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json\n&#123;\n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: &#123;\n    &quot;max-size&quot;: &quot;100m&quot;\n  &#125;,\n  &quot;storage-driver&quot;: &quot;overlay2&quot;\n&#125;\nEOF</code></pre>\n\n\n\n<ul>\n<li>重启docker并设置开机启动</li>\n</ul>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">sudo systemctl enable docker\nsudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre>\n\n\n\n<ul>\n<li>安装kubeadm</li>\n</ul>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">cat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;modules-load.d&#x2F;k8s.conf\nbr_netfilter\nEOF\n\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf\nnet.bridge.bridge-nf-call-ip6tables &#x3D; 1\nnet.bridge.bridge-nf-call-iptables &#x3D; 1\nEOF\nsudo sysctl --system</code></pre>\n\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">sudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl</code></pre>\n\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">sudo curl -fsSLo &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;kubernetes-archive-keyring.gpg https:&#x2F;&#x2F;packages.cloud.google.com&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg</code></pre>\n\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">echo &quot;deb [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;kubernetes-archive-keyring.gpg] https:&#x2F;&#x2F;apt.kubernetes.io&#x2F; kubernetes-xenial main&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list</code></pre>\n\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">sudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl</code></pre>\n\n\n\n<p><strong>以上操作各个节点都需要操作</strong></p>\n<p>使用kubeadm指令初始化（master节点：node1）</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">ubuntu@node1:~$ sudo kubeadm init --pod-network-cidr&#x3D;10.244.0.0&#x2F;16\n[init] Using Kubernetes version: v1.22.2\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;\n[certs] Using certificateDir folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;pki&quot;\n[certs] Generating &quot;ca&quot; certificate and key\n[certs] Generating &quot;apiserver&quot; certificate and key\n[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local node1] and IPs [10.96.0.1 172.16.241.11]\n[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key\n[certs] Generating &quot;front-proxy-ca&quot; certificate and key\n[certs] Generating &quot;front-proxy-client&quot; certificate and key\n[certs] Generating &quot;etcd&#x2F;ca&quot; certificate and key\n[certs] Generating &quot;etcd&#x2F;server&quot; certificate and key\n[certs] etcd&#x2F;server serving cert is signed for DNS names [localhost node1] and IPs [172.16.241.11 127.0.0.1 ::1]\n[certs] Generating &quot;etcd&#x2F;peer&quot; certificate and key\n[certs] etcd&#x2F;peer serving cert is signed for DNS names [localhost node1] and IPs [172.16.241.11 127.0.0.1 ::1]\n[certs] Generating &quot;etcd&#x2F;healthcheck-client&quot; certificate and key\n[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key\n[certs] Generating &quot;sa&quot; key and public key\n[kubeconfig] Using kubeconfig folder &quot;&#x2F;etc&#x2F;kubernetes&quot;\n[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file\n[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file\n[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file\n[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file\n[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;\n[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;\n[kubelet-start] Starting the kubelet\n[control-plane] Using manifest folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;\n[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;\n[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;\n[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;\n[etcd] Creating static Pod manifest for local etcd in &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;. This can take up to 4m0s\n[kubelet-check] Initial timeout of 40s passed.\n[apiclient] All control plane components are healthy after 58.570622 seconds\n[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace\n[kubelet] Creating a ConfigMap &quot;kubelet-config-1.22&quot; in namespace kube-system with the configuration for the kubelets in the cluster\n[upload-certs] Skipping phase. Please see --upload-certs\n[mark-control-plane] Marking the node node1 as control-plane by adding the labels: [node-role.kubernetes.io&#x2F;master(deprecated) node-role.kubernetes.io&#x2F;control-plane node.kubernetes.io&#x2F;exclude-from-external-load-balancers]\n[mark-control-plane] Marking the node node1 as control-plane by adding the taints [node-role.kubernetes.io&#x2F;master:NoSchedule]\n[bootstrap-token] Using token: uyydwy.xlbh5ta1wdfecxjw\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace\n[kubelet-finalize] Updating &quot;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf&quot; to point to a rotatable kubelet client certificate and key\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME&#x2F;.kube\n  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\n  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:\n  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 172.16.241.11:6443 --token uyydwy.xlbh5ta1wdfecxjw \\\n    --discovery-token-ca-cert-hash sha256:5b3d416064c712ed79ecfc2f65ccc9f7cef745321ae03eb154e1ef880f3212a7</code></pre>\n\n\n\n<ol>\n<li>配置</li>\n</ol>\n<p>按照上面的日志记录配置：</p>\n<p>如果非root用户执行</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">mkdir -p $HOME&#x2F;.kube\nsudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\nsudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</code></pre>\n\n\n\n<p>如果是root用户执行</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">shell export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</code></pre>\n\n\n\n<ol>\n<li>验证主节点是否成功（加到环境变量中，否则机器重启后失败。）</li>\n</ol>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</code></pre>\n\n\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-342288a39f27299f66229ea26f4a4ad5_1440w.jpg\" alt=\"img\"></p>\n<p>正确返回，说明节点初始化成功。</p>\n<p>将从节点加入到集群（node2，node3 执行）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo kubeadm join 172.16.241.11:6443 --token uyydwy.xlbh5ta1wdfecxjw --discovery-token-ca-cert-hash sha256:5b3d416064c712ed79ecfc2f65ccc9f7cef745321ae03eb154e1ef880f3212a7</code></pre>\n\n\n\n<p>如果上面的token忘记了执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm token list</code></pre>\n\n\n\n<p>如果token-ca-cert-bash忘记了执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl x509 -pubkey -in &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt | openssl rsa -pubin -outform der 2&gt;&#x2F;dev&#x2F;null | openssl dgst -sha256 -hex | sed &#39;s&#x2F;^.* &#x2F;&#x2F;&#39;</code></pre>\n\n\n\n<p>回到master(node1):</p>\n<p>执行<code>kubectl get nodes</code></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-7765ee426054ab08b4bf629f58a481e6_1440w.jpg\" alt=\"img\"></p>\n<p>可以看到node2节点已经加入集群。</p>\n<p>同理操作node3节点。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-a8280e3a0546ae19afef9a34955efcb6_1440w.jpg\" alt=\"img\"></p>\n<p>配置网络</p>\n<p>网络有很多种，本人使用的是flannel</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml</code></pre>\n\n\n\n<p>查看节点：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-d4944d9feb0f4cb018c775c746642dd6_1440w.jpg\" alt=\"img\"></p>\n<p>节点状态都变成了Ready</p>\n<p>部署应用（官方示例）</p>\n<ul>\n<li>发布应用</li>\n</ul>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">kubectl create deployment kubernetes-bootcamp --image&#x3D;gcr.io&#x2F;google-samples&#x2F;kubernetes-bootcamp:v1</code></pre>\n\n\n\n<p>查看是否发布成功（下载镜像有点满，而且还需要科学上网哟）</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-216bb9e10a3af4b8284e48d7b911de02_1440w.jpg\" alt=\"img\"></p>\n<ul>\n<li>浏览应用</li>\n</ul>\n<p>此时应用pod在一个私有的、隔离的网络上，无法外部访问。可以使用kubectl proxy 代理访问。</p>\n<ul>\n<li>开放应用程序</li>\n</ul>\n<p>使用serivce开发应用：</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">kubectl expose deployment&#x2F;kubernetes-bootcamp --type&#x3D;&quot;ClusterIP&quot; --port 8080</code></pre>\n\n\n\n<p>查询serivce</p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">kubectl get services</code></pre>\n\n\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-c64312b403859fcf88c3b7bea9ee1655_1440w.jpg\" alt=\"img\"></p>\n<p>查看下service的具体描述信息</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f6840cf3469ff7489ad218ba51bf8ed6_1440w.jpg\" alt=\"img\"></p>\n<p>访问应用</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-482360f4887f64c9893f1f7ef069f55e_1440w.png\" alt=\"img\"></p>\n<ul>\n<li>扩展应用</li>\n</ul>\n<p>查看pod数量</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">kubectl get deployments</code></pre>\n\n\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-ef5649c027bd1408fcff8b5a87007117_1440w.png\" alt=\"img\"></p>\n<p>查看副本：</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-13249c5e0b9be10572c72ad1c4318869_1440w.png\" alt=\"img\"></p>\n<p>扩展到4个：</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">kubectl scale deployments&#x2F;kubernetes-bootcamp --replicas&#x3D;4</code></pre>\n\n\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-a543571fff4f636ce32957086ef1678a_1440w.jpg\" alt=\"img\"></p>\n<p>查看pod数量：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-693a24640d902f88ca81920d1fc10bb8_1440w.jpg\" alt=\"img\"></p>\n<p>我们能看到有些容器还在创建。</p>\n<p>查看这些pod都在哪些节点上</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">kubectl get pods -o wide</code></pre>\n\n\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-b382a9ef4013531a74d7c2f3e86dbc5b_1440w.jpg\" alt=\"img\"></p>\n<ul>\n<li>滚动更新应用</li>\n</ul>\n<p>上面使用的镜像是v1版本，接下来升级到v2版本</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">kubectl set image deployments&#x2F;kubernetes-bootcamp kubernetes-bootcamp&#x3D;jocatalin&#x2F;kubernetes-bootcamp:v2</code></pre>\n\n\n\n<p><img src=\"https://pic1.zhimg.com/80/v2-38dfe66056a34fc5b1431545a247c1f8_1440w.jpg\" alt=\"img\"></p>\n<p>访问：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-482360f4887f64c9893f1f7ef069f55e_1440w.png\" alt=\"img\"></p>\n<p><em>回滚操作</em></p>\n<p>当我们升级失败，或者升级版本有代码问题时，我们需要回滚到上一版本。</p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">kubectl rollout undo deployments&#x2F;kubernetes-bootcamp</code></pre>\n\n\n\n<p>重新访问应用：</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-ed34393e0d1c93bd09b80f52ed588fe3_1440w.jpg\" alt=\"img\"></p>\n<p>我们看到版本已经回退到了v1。</p>\n<p>kubernetes集群搭建就完成了，本文只是基本使用。我也在初学中。kubernetes的知识还是挺多的。感觉学不动了 。分享给大家。</p>\n<hr>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">梦想越是美丽，就越是显得遥不可及。可奇怪的是，一旦你下定了决心，很快地，那些梦想就一一成为了现实！</code></pre>\n","feature":true,"text":"版本说明 v1.22 准备三台机器 使用Multipass（如何使用，请参考文章皮皮：使用Ubuntu Multipass创建虚拟机（方便快捷））创建三个vm。也就是三个节点node1， node2， node3 multipass launch -c 2 -m 2G -n no...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/categories/Kubernetes.json"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":1,"path":"api/tags/Kubernetes.json"},{"name":"Container","slug":"Container","count":1,"path":"api/tags/Container.json"}],"toc":"","author":{"name":"ITLab","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204221711395.png","link":"/","description":"梦想越是美丽，就越是显得遥不可及，可奇怪的是，一旦你下定了决心，很快地，那些梦想就一一成为了现实！","socials":{"github":"https://github.com/ITLab1024","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xpp1109","csdn":"","juejin":"","customs":{"wxgzh":{"icon":"fa fa-wechat","link":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204231828426.jpg"}}}},"mapped":true,"prev_post":{"title":"scala2学习笔记（v2.12.11）","uid":"d339d355269868e4606a9ed4016aeb8f","slug":"scala2学习笔记（v2-12-11）","date":"2022-06-02T08:54:37.000Z","updated":"2022-06-02T09:13:33.529Z","comments":true,"path":"api/articles/scala2学习笔记（v2-12-11）.json","keywords":null,"cover":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202206021658720.jpeg","text":"什么是Scala？Scala 是一门基于JVM和Java完全兼容的语言，具有跨平台，可移植性，完备的垃圾回收机制等特定 Scala比Java更加面向对象，他是一门纯面向对象的语言，我们知道Java并不是，比如他具有基本类型。 Scala是一门函数式编程语言，Java并不是，JDK...","link":"","photos":[],"count_time":{"symbolsCount":"56k","symbolsTime":"51 mins."},"categories":[{"name":"Scala","slug":"Scala","count":1,"path":"api/categories/Scala.json"}],"tags":[{"name":"Scala2","slug":"Scala2","count":1,"path":"api/tags/Scala2.json"},{"name":"2.12.11","slug":"2-12-11","count":1,"path":"api/tags/2-12-11.json"},{"name":"BigData","slug":"BigData","count":1,"path":"api/tags/BigData.json"}],"author":{"name":"ITLab","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204221711395.png","link":"/","description":"梦想越是美丽，就越是显得遥不可及，可奇怪的是，一旦你下定了决心，很快地，那些梦想就一一成为了现实！","socials":{"github":"https://github.com/ITLab1024","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xpp1109","csdn":"","juejin":"","customs":{"wxgzh":{"icon":"fa fa-wechat","link":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204231828426.jpg"}}}},"feature":true},"next_post":{"title":"ubuntu-multipass","uid":"ba590f4c595f20e0726c162dbce4dd2d","slug":"ubuntu-multipass","date":"2022-04-24T08:42:43.000Z","updated":"2022-06-02T08:46:03.037Z","comments":true,"path":"api/articles/ubuntu-multipass.json","keywords":null,"cover":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204241645651.png","text":"什么是Maultipass？ 官方说明： Ubuntu VMs on demand for any workstation Get an instant Ubuntu VM with a single command. Multipass can launch and run v...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"ubuntu","slug":"ubuntu","count":1,"path":"api/categories/ubuntu.json"},{"name":"multipass","slug":"ubuntu/multipass","count":1,"path":"api/categories/ubuntu/multipass.json"},{"name":"虚拟机","slug":"ubuntu/multipass/虚拟机","count":1,"path":"api/categories/ubuntu/multipass/虚拟机.json"}],"tags":[{"name":"multipass","slug":"multipass","count":1,"path":"api/tags/multipass.json"},{"name":"ubuntu","slug":"ubuntu","count":1,"path":"api/tags/ubuntu.json"}],"author":{"name":"ITLab","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204221711395.png","link":"/","description":"梦想越是美丽，就越是显得遥不可及，可奇怪的是，一旦你下定了决心，很快地，那些梦想就一一成为了现实！","socials":{"github":"https://github.com/ITLab1024","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/xpp1109","csdn":"","juejin":"","customs":{"wxgzh":{"icon":"fa fa-wechat","link":"https://raw.githubusercontent.com/ITLab1024/picgo-images/main/202204231828426.jpg"}}}},"feature":true}}